给大家简单概述下目前我对整个系统的理解，我用我的理解
    1.数据库（技术选型：MySql）
        1.数据库选用mysql，语法和内容和sqlserver基本没有差别
        2.工作任务主要
            1.需求分析
                1.系统功能描述
                2.业务流程分析
                3.数据流图、数据字典等
            2.概念结构分析
                1.分析实体和它们之间的联系
                2.完成E-R图等
            3.逻辑结构设计
                1.向关系模式的转换
                2.范式调整（就是我们学过的几个范式）
                3.约束说明（主键约束、外键约束、唯一约束、空值约束等等）
                4.表结构设计
            4.数据库实现
                1.基本表的建立
                2.视图、索引建立等
                3.查询的建立
                4.事务的分析（事务简单点说就是几件事做的时候不能中断，比如A转钱给B500元，对计算机有两部操作1.A-500，2.B+500，不能让1执行了2不执行就是事务，假设1执行了2不执行我们可以回滚）
    2.后端（技术选型：MyBaits、axios、Springboot，下面会讲下我的理解）
        1.以下层级间低层为高层提供服务，高层调用低层方法（有点像计算机网络）
        2.dao层（又称mapper层，可以理解为连接数据库的那层，也就是说他之下的那层就是数据库）
            1.采用MyBaits框架连接数据库实现
            2.完成各种基本的查询、插入、及删除操作
            3.结合service层业务完成各种复杂的业务操作
        3.domain层（又称pojo层，主要对应数据库中的基本表实现和数据库表之间的映射关系构建他们的实体类）
            1.尽量与数据库中的表明列名相同
            2.如果有多表查询的相关操作，需要配置文件映射与数据库中表的对应关系（这里的原因是数据库中可以有外键约束，但是java中没有）
            3.数据结构如果不能由MyBatis自动转换的手动配置数据结构的转换工作（主要是因为数据库中的基本数据结构和java中的基本数据结构并不一一对应，甚至很多完全不同）
        4.service层（业务层，主要分析具体的业务逻辑实现业务）
            1.分析具体的业务逻辑
            2.分析具体的数据流向和事务关系
            3.完成具体的业务功能
        5.controller层（又称web层，负责对前端页面访问进行控制和跳转，将前端数据传回service层，将service层数据传给前端，这里比较难理解我下面会单独说）
            1.分析前端应向展现的界面和数据之间的关系
            2.根据分析，对应跳转响应的页面并接受和发送响应的请求数据和相应数据
        6.以上四层基本符合MVC模型的思路（下面是MVC模型的定义）
            1.M Model 业务模型，处理业务，主流框架Spring
            2.V View 视图 界面展示，主流框架Spring MVC
            3.C Controller 控制器，处理请求，调用模型和视图，主流框架Spring MVC
            4.MVC模型就是开发中把这三个分开
            5.最后再介绍一个层叫持久层，就是把内存中的数据存到硬盘里，用的主流框架爱就是Mybatis
        7.spring框架（框架就是一个软件的半成品）
            1.spring有很多功能，最重要的就是帮你管理bean（其实就是对象），这样你就不用自己new对象，你可以直接向spring要对象，优点有很多
            2.spring帮你管理对象用到一个思想叫IOC反转控制，就是用的java里的反射，简单理解就是spring在运行中能够感知到你写的类和方法，并能够自动实例化对象并帮你管理
            3.spring的功能还有一个叫依赖注入的，官方的解释就是为模块间解耦所产生，简单理解就是，比如一个类中写了一个属性，这个属性不用你去赋值，通过1你就知道所有的类spring都可以帮你管理，那么他也可以帮你给你想要的属性赋值，这就是依赖注入，就是一个模块依赖另一个模块的值你只需要向spring声明
            4.为什么要实现1和3的功能，原因是
                1.这样你在运行程序时不用创建类，耗费时间，而且你自己new多了你容易忘记，浪费内存
                2.还是解耦思想，就是说一个模块的开发尽量少的依赖另一个模块的开发
                3.这不是说两个模块没有关系，可以用配置文件的思想把两个模块联系起来
            5.spring还有很多功能，他是个轻量级的框架，他不排斥其他优秀的框架
            6.前面说了spring的IOC反转控制思想，这里在讲一个思想叫AOP面向切面编程，这是Spring两个核心的知识
                1.这个思想也是为了解耦合的，spring的aop底层应用了java的动态代理技术
                2.前面太术语这里我谈我的理解，说的简单点是java在运行中动态的帮你增添或更改你已经写好的类里的各种方法和属性
                3.这么做有什么意义呢？举个例子就是你有一个计算器程序，这时候你想让计算器程序开始执行前打印一句话，按照我们原来的思想就是找到源码，在前面添句话。这么做的缺点是，万一实现的功能很复杂，并且源码也很复杂，你就很难去找到在哪添加。但aop思想就是你只需要把这个功能写入一个普通的类这个类就叫切面，然后通过配置文件的方式把这个切面放到你原先写的那个方法类或方法（叫切点）中去当然不是手动放，是spring帮你放，就完成了这个工作
        8.springMVC框架
            1.前面说完了spring框架，我们再说springMvc框架，他是基于前面的框架做的
            2.如果你理解了MVC模型，那么就应该明白这个框架就是为了mvc模型而做的
            3.他主要的功能就是联系视图和控制之间的关系，简化他们的操作
            4.这里必须要理解javaweb技术规范，如果你从未了解过可以先看10
            5.通过了解javaweb你知道其实这里的方法其实非常繁杂，为了简化开发就有了springmvc框架，他已经帮你完成了大部分你想接受和发送数据的封装
        9.了解了spring、springMVC和Mybatis框架，你是否发现其实这些框架就像是面向配置文件的编程，而不是面向对象的编程，那就对了，你的工作就是配置
        10.javaweb
            1.javaweb技术主要是用java来做后端开发，其中有三大核心你应该了解，即servlet、filter、listener，我会简单讲解这些
            2.首先是服务器，服务器我们用tomcat服务器，可以集成在idea上非常方便
                1.服务器通俗将就是个虚拟机，我们可以通过ip地址和端口号访问服务器里的文件
                2.javaweb中服务器中存的文件无非就是html网页和相关的资源，这里我会在前端中详细展开
            3.而javaweb就是控制服务器访问的一个规范，就是大家听说的javaEE，javaEE可以理解就是规范规定大家怎么做的，当然里面现在很多内容已经淘汰
            4.servlet，根据前面的描述他其实也是个规范，那我们学过的规范可以用什么描述？接口和抽象类（因为接口和抽象类中的方法没有实现），这里用接口，接口里的方法就是由服务器开发厂商实现的
                1.那么要实现哪些内容，无非就是定义一些方法，这些方法负责接受和发送请求
                2.这里补充接受和发送的底层原理就是基于HTTP协议，我们知道HTTP协议就是基于TCP连接的数据传输方式（这里如果不太记得可以去翻看计算机网络）
                3.那么我们只需要一个类继承这个服务器开发厂商已经帮我们实现的类就可以完成服务端到客户端的通信啦
                4.客户端是怎样访问web资源的？是通过一个叫url（统一资源定位符，计网也讲了）的东西，简单理解就是地址
                5.那么每当客户端访问某个特定的url时就会触发servlet这个类里的各种方法，就会完成通信，当然也可以是发送特定的指令（例如get请求和post请求）
                6.事实上servlet里面有很多方法包括我们知道的接受发送资源、访问Cookie、Session（下面我会说下），这部分内容其实并不难只是非常多
                7.提到Cookie、Session就要提到会话跟踪技术，简单的说就是我们知道HTTP协议是无状态的连接，就是说每次连接都不知道上次已经连接过了，每次连接都是独立的
                    1.那么为了保证下次连接时我们知道上次连接过就有了会话跟踪技术其核心如下
                    2.Cookie就是存在你浏览器上的一小段信息，是公开的，那么当服务器访问你的浏览器时，也可以访问Cookie发现我之前存在你浏览器中的信息，就可以证明我访问过你
                    3.Session的本质也是Cookie，就是服务器发送一个SessionID到你的浏览器中，同时在服务器内存中也开辟一个存储空间，当我访问你的浏览器发现你的SessionID时我就去查找我内存中的Session
                    4.通过这个技术就可以实现你的淘宝购物车功能啦，当然你也可以在你的浏览器中找到你的Cookie
            5.jsp提到servlet技术就得提到jsp，jsp是一个快要淘汰的末年技术这里不多提，但jsp的本质其实还是servlet，他完成的功能是，我们知道不是所有的网页都是事先编好的静态网页，有些是通过查询数据库得到数据在渲染到网页上，jsp就是完成这个功能
            6.filter，过滤器，名如其功能，意思就是不是所有的请求服务器都要接受，不是所有的数据都要返回给客户端，可以设置一个过滤器来处理和过滤掉数据
            7.listener，监听器，同上面一样名如其功能，主要是监听和服务器有关对象和数据的变化，当监听到了你可以执行特定的操作
            8.axios框架，这个框架的底层原理是AJAX，异步JavaScript和XML，目的很简单你会发现你通过了解上述内容发现，是不是每次客户请求服务器，服务器都要响应并且返回响应的视图？这太浪费资源，那么我们可以采用异步通信的方式，简单理解就是不改变url的基础上实现通信
        11.spring Boot，这个好理解他不是个新知识，你发现上面的内容太多了，怎么办？SpringBoot其实都帮你配置好了，这下你都不用面向配置文件编程，你只需要写核心的业务逻辑，即service层的业务，其他的内容你只需要稍作修改就是一个成品